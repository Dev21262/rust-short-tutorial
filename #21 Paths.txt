Paths are the address to a component (function, struct) within a module


A path can take two forms:

1. An absolute path is the full path starting from a crate root;
for code from an external crate, 
the absolute path begins with the crate name,
 
and for code from the current crate,
it starts with the word 'crate'

2. A relative path starts from the current module and uses self,
 super, or an identifier in the current module.

mod front_of_house { //Parent Module
    pub fn order_ready() -> bool  { //Child Module
        
    }
    pub mod hosting { //Sibling Child module
        fn add_to_waitlist() {}

        //Note: We can use the order_ready function inside this module
        but for this child module to be used inside front_of_house one
        requires the pub keyword
    }
}

//Note: In order to use a module in the outermost scope all the 
upper scopes must have pub keyword so the newest child can share its
code

pub fn eat_at_restaurant() {
    // Calling a function with Absolute path 
    crate::front_of_house::hosting::add_to_waitlist();

    // Calling a function with Relative path
    front_of_house::hosting::add_to_waitlist();
}

We can also construct relative paths that begin in the parent module
and not the current module

---Start of a module file---
fn deliver_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::deliver_order(); 
        //Super refers to the parent module and then we use th function
    }

    fn cook_order() {}
}
---End of a module file---

Structs and Enums inside a module

if we make an enum public, all of its variants are then public. 
We only need the pub before the enum keyword,

mod back_of_house {
    pub enum Appetizer {
        Soup,
        Salad,
    }
}

pub fn eat_at_restaurant() {
    let order1 = back_of_house::Appetizer::Soup;
    let order2 = back_of_house::Appetizer::Salad;
}


If we use pub before a struct definition,
we make the struct public, but the structâ€™s
fields will still be private.

mod back_of_house {
    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit: String,
    }

    impl Breakfast {
        pub fn summer(toast: &str) -> Breakfast {
            Breakfast {
            //In the above 2lines instead of Breakfast 
            //you can also use Self
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
}

pub fn eat_at_restaurant() {
    // Order a breakfast in the summer with Rye toast.
    let mut meal = back_of_house::Breakfast::summer("Rye");
    // Change our mind about what bread we'd like.
    meal.toast = String::from("Wheat");
    println!("I'd like {} toast please", meal.toast);

    // The next line won't compile if we uncomment it; we're not allowed
    // to see or modify the seasonal fruit that comes with the meal.
    // meal.seasonal_fruit = String::from("blueberries");
}